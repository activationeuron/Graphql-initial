type Query {
  greeting(name: String!): String!
  me: User!
  grades: [Int!]!
  post: [Post!]!
  posts(query: String): [Post!]!
  users(query: String): [User!]!
  comments: [Comment!]
}

type Mutation {
  createUser(data: CreateUserInput): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput): User!
  createPost(data: CreatePostInput): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: updatePostInput): Post!
  createComment(data: createCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: updateCommentInput!): Comment!
}
type Subscription {
  count: Int!
  comment(postId: ID!): Comment!
  post: Post!
}
input CreateUserInput {
  name: String!
  email: String!
  age: Int
}
input UpdateUserInput {
  name: String
  email: String
  age: Int
}
input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}
input updatePostInput {
  title: String
  body: String
  published: Boolean
}
input createCommentInput {
  text: String!
  author: ID!
  post: ID!
}

input updateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post]! #costume resolvers
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User! #if the field is not a scalger we have to add a costume resolvers
  comments: [Comment!]
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}
